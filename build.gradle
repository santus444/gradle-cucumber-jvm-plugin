plugins {
    id 'groovy'
    id 'codenarc'
    id 'net.saliman.cobertura' version '2.2.8'
    id 'idea'
    id 'maven-publish'
    id 'net.researchgate.release' version '2.1.2'
    id "com.jfrog.bintray" version "1.2"
    id 'nebula.integtest' version '3.0.3'
    id 'com.gradle.plugin-publish' version '0.9.4'
}

sourceCompatibility = 1.7
targetCompatibility = 1.7


repositories {
    maven {
        url "http://repo.bodar.com"
    }
    jcenter()
}

dependencies {
    compile gradleApi()

    compile 'org.codehaus.gpars:gpars:1.2.1'
    compile 'org.zeroturnaround:zt-exec:1.8'
    compile 'net.masterthought:cucumber-reporting:3.2.0'

    //testCompile 'org.spockframework:spock-core:0.7-groovy-2.0'
    testCompile 'com.netflix.nebula:nebula-test:4.2.2'

    //intTestCompile 'org.spockframework:spock-core:0.7-groovy-2.0'
    integTestCompile 'com.netflix.nebula:nebula-test:3.1.0'
}

sourceSets {
    test {
        //remove incompatible jar from test class path
        runtimeClasspath = runtimeClasspath.minus files("$gradle.gradleHomeDir/lib/commons-io-1.4.jar")
    }
}

codenarc {
    configFile = rootProject.file('codenarcrule.groovy')
    reportFormat = System.properties['codeNarcOutput'] ?: 'html'
}

cobertura {
    coverageIgnoreTrivial = true
    auxiliaryClasspath += project.sourceSets.main.runtimeClasspath
}

test {
    finalizedBy coberturaReport
}

integrationTest {
    finalizedBy coberturaReport
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

// add javadoc/source jar tasks as artifacts
artifacts {
    archives sourcesJar, javadocJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            artifact sourcesJar {
                classifier "sources"
            }

            artifact javadocJar {
                classifier "javadoc"
            }

            pom.withXml {
                def Node root = asNode()
            }
        }
    }
}

bintray {
    user = project.hasProperty("bintrayUserName") ? bintrayUserName : null
    key = project.hasProperty("bintrayApiKey") ? bintrayApiKey : null
    publications = ["mavenJava"]
    pkg {
        repo = "main"
        userOrg = "commercehub-oss"
        name = 'gradle-cucumber-jvm-plugin'
        licenses = ["Apache-2.0"]
        vcsUrl = 'https://github.com/commercehub-oss/gradle-cucumber-jvm-plugin'
    }
}
bintrayUpload.dependsOn build, sourcesJar, javadocJar
createReleaseTag.dependsOn bintrayUpload
createReleaseTag.dependsOn publishPlugins

pluginBundle {
    website = "https://github.com/commercehub-oss/gradle-cucumber-jvm-plugin"
    vcsUrl = "https://github.com/commercehub-oss/gradle-cucumber-jvm-plugin"
    description = "The gradle cucumber-jvm plugin provides the ability to run cucumber acceptance tests directly from a gradle build."
    tags = ["cucumber", "java", "testing"]
    plugins {
        cucumberJvm {
            id = "com.commercehub.cucumber-jvm"
            displayName = "Cucumber-JVM Plugin"
        }
    }
    mavenCoordinates {
        groupId = "com.commercehub"
        artifactId = "gradle-cucumber-jvm-plugin"
    }
}
